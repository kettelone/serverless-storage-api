service: serverless-cognito-auth

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
    imageUploadBucket: ${self:custom.imageUploadBucket}
    region: ${self:provider.region}
    MYSQL_HOST: ${self:custom.MYSQL_HOST}
    MYSQL_PORT: ${self:custom.MYSQL_PORT}
    MYSQL_DB_NAME: ${self:custom.MYSQL_DB_NAME}
    MYSQL_USERNAME: ${self:custom.MYSQL_USERNAME}
    MYSQL_PASSWORD: ${self:custom.MYSQL_PASSWORD}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - s3:*
      Resource: "*"
plugins:
  - serverless-offline

package:
    individually: true

custom:
    imageUploadBucket: BUCKETNAME
    MYSQL_DB_IDENTIFIER: DBIDENTIFIER
    MYSQL_DB_NAME: DBNAME
    MYSQL_USERNAME: USERNAME
    MYSQL_PASSWORD: PASSWORD
    MYSQL_HOST: 
      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Address]
    MYSQL_PORT:
      Fn::GetAtt: [MySqlRDSInstance, Endpoint.Port]

functions:
  loginUser:
    handler: user/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true

  signupUser:
    handler: user/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  uploadAPI:
    handler: user/uploadImage.handler
    events:
      - http:
          path: user/upload-image
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  
  deleteImage:
    handler: user/deleteImage.handler
    events: 
      - http:
          path: user/delete-image
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  getImagesList:
    handler: user/getImagesList.handler
    events:
      - http:
          path: user/get-image-list
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
       
    ImageUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageUploadBucket}
        AccessControl: PublicRead

    MySqlRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: ${self:custom.MYSQL_DB_IDENTIFIER}
        MasterUsername: ${self:custom.MYSQL_USERNAME}
        MasterUserPassword: ${self:custom.MYSQL_PASSWORD}
        AllocatedStorage: 20
        DBName: ${self:custom.MYSQL_DB_NAME}
        DBInstanceClass: db.t2.micro
        Engine: mysql
        EngineVersion: "8.0.20"
        PubliclyAccessible: true
